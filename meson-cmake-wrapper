#!/usr/bin/env python3
from sys import argv
from os import mkdir, path, getcwd
from subprocess import call, Popen, PIPE
import json


class Meson():
    def __init__(self, cmake):
        self.cmake = cmake

    def setup(self):
        ninja_file = path.join(self.cmake.build_dir, "build.ninja")
        if path.exists(ninja_file):
            return True

        meson_file = path.join(self.cmake.src_dir, "meson.build")
        if not path.exists(meson_file):
            print("No meson.build in source directory!")
            return False

        call(["meson", "setup"])
        return True

    def build(self):
        if self.setup():
            call(["ninja", self.cmake.target])

    def get_targets(self):
        if not self.setup():
            return {}

        target_json = Popen(["meson", "introspect",
                             "--targets", self.cmake.build_dir],
                            stdout=PIPE).communicate()[0]
        return json.loads(target_json)


class CMakeWrapper():
    def __init__(self):
        self.meson = Meson(self)
        self.cmd = "help"
        self.target = "all"
        self.target_args = []
        self.build_dir = getcwd()

    def run(self, args):
        i = 0
        while i < len(args):
            if args[i] == "-version":
                self.cmd = "version"
            elif args[i] == "-G":
                self.cmd = "generate"
                i += 1
                self.generator = args[i]
            elif args[i] == "--build":
                self.cmd = "build"
                i += 1
                self.src_dir = args[i]
            elif args[i] == "--target":
                i += 1
                self.target = args[i]
                i += 1
                while i < len(args):
                    self.target_args.append(args[i])
                    i += 1
            else:
                self.src_dir = args[i]
            i += 1

        {
            "help": self.help,
            "version": self.version,
            "generate": self.generate,
            "build": self.build
        }[self.cmd]()

    def help(self):
        pass

    def version(self):
        print("cmake version 3.0.0")

    def generate(self):
        print("Generate to build directory: " + self.build_dir)
        # Make sure build directory exists
        if not path.exists(self.build_dir):
            mkdir(self.build_dir)

        # CLion requires a CMakeFiles directory at root of build directory
        root_cmakefiles_dir = path.join(self.build_dir, "CMakeFiles")
        if not path.exists(root_cmakefiles_dir):
            mkdir(root_cmakefiles_dir)
        
        # CLion requires that Makefile.cmake exists
        with open(path.join(root_cmakefiles_dir, "Makefile.cmake"), "w") as file:
            file.write("")

        # CLion fetches target directories from TargetDirectories.txt
        with open(path.join(root_cmakefiles_dir, "TargetDirectories.txt"), "w") as target_dir_file:
            targets = self.meson.get_targets()
            print(targets)
            
            for target in targets:
                # All directories under the build directory should have a CMakeFiles directory
                cmakefiles_dir = path.join(self.build_dir, path.split(target["filename"])[0], "CMakeFiles")
                if not path.exists(cmakefiles_dir):
                    mkdir(cmakefiles_dir)
                
                # CLion fetches target name from TARGET_NAME.dir directories
                target_path = path.join(self.build_dir, path.split(target["filename"])[0], "CMakeFiles", target["name"] + ".dir")
                target_dir_file.write(target_path + "\n")
                if not path.exists(target_path):
                    mkdir(target_path)
                # CLion requires that TARGET_PATH/DependInfo.cmake exists
                with open(path.join(target_path, "DependInfo.cmake"), 'w') as depend_file:
                    depend_file.write("")
                # CLion fetches target name from TARGET_PATH/build.make
                with open(path.join(target_path, "build.make"), 'w') as build_file:
                    #build_file.write(path.join(target_path, "build") + ": " + target["filename"])
                    build_file.write(path.join(target_path, "build") + ": " + path.join(self.build_dir, target["filename"]))


        # CLion requires that CMakeCache.txt exists
        with open(path.join(self.build_dir, "CMakeCache.txt"), "w") as file:
            file.write("")

    def build(self):
        print("Building target: " + self.target)
        self.meson.build()


def main():
    cmake_wrapper = CMakeWrapper()

    cmake_wrapper.run(argv)

if __name__ == "__main__":
    main()
