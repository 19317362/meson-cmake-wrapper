#!/usr/bin/env python3
import json
import socket
import xml.etree.ElementTree as ETree
from os import mkdir, path, getcwd
from subprocess import call, Popen, PIPE, DEVNULL
from sys import argv

cmakecache = """
# Generated by meson-cmake-wrapper

########################
# EXTERNAL cache entries
########################

//Path to a program.
CMAKE_AR:FILEPATH=/usr/bin/ar

//Choose the type of build, options are: None(CMAKE_CXX_FLAGS or
// CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.
CMAKE_BUILD_TYPE:STRING=

//Enable/Disable color output during build.
CMAKE_COLOR_MAKEFILE:BOOL=ON

//CXX compiler
CMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++

//A wrapper around 'ar' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_CXX_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar

//A wrapper around 'ranlib' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_CXX_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib

//Flags used by the compiler during all build types.
CMAKE_CXX_FLAGS:STRING=

//Flags used by the compiler during debug builds.
CMAKE_CXX_FLAGS_DEBUG:STRING=-g

//Flags used by the compiler during release builds for minimum
// size.
CMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

//Flags used by the compiler during release builds.
CMAKE_CXX_FLAGS_RELEASE:STRING=-O2 -DNDEBUG

//Flags used by the compiler during release builds with debug info.
CMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

//C compiler
CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

//A wrapper around 'ar' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar

//A wrapper around 'ranlib' adding the appropriate '--plugin' option
// for the GCC compiler
CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib

//Flags used by the compiler during all build types.
CMAKE_C_FLAGS:STRING=

//Flags used by the compiler during debug builds.
CMAKE_C_FLAGS_DEBUG:STRING=-g

//Flags used by the compiler during release builds for minimum
// size.
CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG

//Flags used by the compiler during release builds.
CMAKE_C_FLAGS_RELEASE:STRING=-O2 -DNDEBUG

//Flags used by the compiler during release builds with debug info.
CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG

//Flags used by the linker.
CMAKE_EXE_LINKER_FLAGS:STRING=

//Flags used by the linker during debug builds.
CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during release minsize builds.
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during release builds.
CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during Release with Debug Info builds.
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Enable/Disable output of compile commands during generation.
CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=OFF

//Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/usr/local

//Path to a program.
CMAKE_LINKER:FILEPATH=/usr/bin/ld

//Path to a program.
CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/gmake

//Flags used by the linker during the creation of modules.
CMAKE_MODULE_LINKER_FLAGS:STRING=

//Flags used by the linker during debug builds.
CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during release minsize builds.
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during release builds.
CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during Release with Debug Info builds.
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_NM:FILEPATH=/usr/bin/nm

//Path to a program.
CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy

//Path to a program.
CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump

//Value Computed by CMake
CMAKE_PROJECT_NAME:STATIC={project_name}

//Path to a program.
CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib

//Flags used by the linker during the creation of dll's.
CMAKE_SHARED_LINKER_FLAGS:STRING=

//Flags used by the linker during debug builds.
CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during release minsize builds.
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during release builds.
CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during Release with Debug Info builds.
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//If set, runtime paths are not added when installing shared libraries,
// but are added when building.
CMAKE_SKIP_INSTALL_RPATH:BOOL=NO

//If set, runtime paths are not added when using shared libraries.
CMAKE_SKIP_RPATH:BOOL=NO

//Flags used by the linker during the creation of static libraries.
CMAKE_STATIC_LINKER_FLAGS:STRING=

//Flags used by the linker during debug builds.
CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=

//Flags used by the linker during release minsize builds.
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=

//Flags used by the linker during release builds.
CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=

//Flags used by the linker during Release with Debug Info builds.
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=

//Path to a program.
CMAKE_STRIP:FILEPATH=/usr/bin/strip

//If this value is on, makefiles will be generated without the
// .SILENT directive, and all commands will be echoed to the console
// during the make.  This is useful for debugging only. With Visual
// Studio IDE projects all commands are done without /nologo.
CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE

//Value Computed by CMake
{project_name}_BINARY_DIR:STATIC={build_dir}

//Value Computed by CMake
{project_name}_SOURCE_DIR:STATIC={source_dir}


########################
# INTERNAL cache entries
########################

//ADVANCED property for variable: CMAKE_AR
CMAKE_AR-ADVANCED:INTERNAL=1
//This is the directory where this CMakeCache.txt was created
CMAKE_CACHEFILE_DIR:INTERNAL={build_dir}
//Major version of cmake used to create the current loaded cache
CMAKE_CACHE_MAJOR_VERSION:INTERNAL={version_major}
//Minor version of cmake used to create the current loaded cache
CMAKE_CACHE_MINOR_VERSION:INTERNAL={version_minor}
//Patch version of cmake used to create the current loaded cache
CMAKE_CACHE_PATCH_VERSION:INTERNAL={version_micro}
//ADVANCED property for variable: CMAKE_COLOR_MAKEFILE
CMAKE_COLOR_MAKEFILE-ADVANCED:INTERNAL=1
//Path to CMake executable.
CMAKE_COMMAND:INTERNAL=/usr/bin/cmake
//Path to cpack program executable.
CMAKE_CPACK_COMMAND:INTERNAL=/usr/bin/cpack
//Path to ctest program executable.
CMAKE_CTEST_COMMAND:INTERNAL=/usr/bin/ctest
//ADVANCED property for variable: CMAKE_CXX_COMPILER
CMAKE_CXX_COMPILER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_COMPILER_AR
CMAKE_CXX_COMPILER_AR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_COMPILER_RANLIB
CMAKE_CXX_COMPILER_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS
CMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG
CMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL
CMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE
CMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO
CMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER
CMAKE_C_COMPILER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER_AR
CMAKE_C_COMPILER_AR-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_COMPILER_RANLIB
CMAKE_C_COMPILER_RANLIB-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS
CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//Path to cache edit program executable.
CMAKE_EDIT_COMMAND:INTERNAL=/usr/bin/ccmake
//Executable file format
CMAKE_EXECUTABLE_FORMAT:INTERNAL=ELF
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_EXPORT_COMPILE_COMMANDS
CMAKE_EXPORT_COMPILE_COMMANDS-ADVANCED:INTERNAL=1
//Name of external makefile project generator.
CMAKE_EXTRA_GENERATOR:INTERNAL=
//Name of generator.
CMAKE_GENERATOR:INTERNAL=Unix Makefiles
//Name of generator platform.
CMAKE_GENERATOR_PLATFORM:INTERNAL=
//Name of generator toolset.
CMAKE_GENERATOR_TOOLSET:INTERNAL=
//Source directory with the top level CMakeLists.txt file for this
// project
CMAKE_HOME_DIRECTORY:INTERNAL={source_dir}
//Install .so files without execute permission.
CMAKE_INSTALL_SO_NO_EXE:INTERNAL=0
//ADVANCED property for variable: CMAKE_LINKER
CMAKE_LINKER-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MAKE_PROGRAM
CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_NM
CMAKE_NM-ADVANCED:INTERNAL=1
//number of local generators
CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=1
//ADVANCED property for variable: CMAKE_OBJCOPY
CMAKE_OBJCOPY-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_OBJDUMP
CMAKE_OBJDUMP-ADVANCED:INTERNAL=1
//Platform information initialized
CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
//ADVANCED property for variable: CMAKE_RANLIB
CMAKE_RANLIB-ADVANCED:INTERNAL=1
//Path to CMake installation.
CMAKE_ROOT:INTERNAL={path}
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_SKIP_RPATH
CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
//ADVANCED property for variable: CMAKE_STRIP
CMAKE_STRIP-ADVANCED:INTERNAL=1
//uname command
CMAKE_UNAME:INTERNAL=/usr/bin/uname
//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
"""


class Meson:
    def __init__(self, cmake, path="meson"):
        self.cmake = cmake
        self.path = path

        # Cache
        self.c_targets = None
        self.c_target_files = {}
        self.c_buildsystem_files = None
        self.c_project_info = None
        self.c_compile_commands = None
        self.c_compile_commands_target = {}
        self.c_def_inc_dirs = {}


    def setup(self):
        ninja_file = path.join(self.cmake.build_dir, "build.ninja")
        if path.exists(ninja_file):
            return True

        meson_file = path.join(self.cmake.source_dir, "meson.build")
        if not path.exists(meson_file):
            print("No meson.build in source directory!")
            return False

        call([self.path, "setup", self.cmake.source_dir])
        return True

    def build(self):
        call(["ninja", self.get_ninja_target(self.cmake.target)])

    def get_ninja_target(self, target_name):
        target = next((t for t in self.get_targets() if t["name"] == target_name), None)
        if target:
            return target["filename"]

        return target_name

    def get_targets(self):
        if self.c_targets:
            return self.c_targets

        output = Popen([self.path, "introspect",
                        "--targets", self.cmake.build_dir],
                       stdout=PIPE).communicate()[0]
        self.c_targets = json.loads(output)
        return self.c_targets

    def get_target_files(self, target):
        id = target["id"]
        if id in self.c_target_files:
            return self.c_target_files[id]
        output = Popen([self.path, "introspect",
                        "--target-files", id, self.cmake.build_dir],
                       stdout=PIPE).communicate()[0]
        self.c_target_files[id] = json.loads(output)
        return self.c_target_files[id]

    def get_buildsystem_files(self):
        if self.c_buildsystem_files:
            return self.c_buildsystem_files
        output = Popen([self.path, "introspect",
                        "--buildsystem-files", self.cmake.build_dir],
                       stdout=PIPE).communicate()[0]
        self.c_buildsystem_files = json.loads(output)
        return self.c_buildsystem_files

    def get_project_info(self):
        if self.c_project_info:
            return self.c_project_info
        output = Popen([self.path, "introspect",
                        "--projectinfo", self.cmake.build_dir],
                       stdout=PIPE).communicate()[0]
        self.c_project_info = json.loads(output)
        return self.c_project_info

    def get_compile_commands(self, target):
        id = target["id"]
        if id in self.c_compile_commands_target:
            return self.c_compile_commands_target[id]

        if not self.c_compile_commands:
            json_data = open(path.join(self.cmake.build_dir, "compile_commands.json")).read()
            self.c_compile_commands = json.loads(json_data)

        # Only way to identify target compiler commands from compile_commands.json
        # is by using a file from the wanted target
        target_file = path.relpath(path.join(self.cmake.source_dir, self.get_target_files(target)[0]))
        self.c_compile_commands_target[id] = next(
            (cmd for cmd in self.c_compile_commands if cmd["file"] == target_file), None)
        return self.c_compile_commands_target[id]

    def get_compiler(self, target=None):
        if not target:
            target = self.get_targets()[0]

        compile_commands = self.get_compile_commands(target)

        if compile_commands:
            return compile_commands["command"].split()[0]
        else:
            return None

    def get_flags(self, target):
        compile_commands = self.get_compile_commands(target)
        if compile_commands:
            args = compile_commands["command"].split()[1:]
            return [arg for arg in args if not arg.startswith(("-D", "-I"))]
        else:
            return []

    def get_defines(self, target):
        compile_commands = self.get_compile_commands(target)
        if compile_commands:
            args = compile_commands["command"].split()
            return [arg for arg in args if arg.startswith("-D")]
        else:
            return []

    def get_include_directories(self, target=None, def_inc=True):
        if not target:
            target = self.get_targets()[0]

        compile_commands = self.get_compile_commands(target)

        if compile_commands:
            if def_inc:
                def_inc_dirs = self.get_default_include_directories(target)
            else:
                def_inc_dirs = []
            args = compile_commands["command"].split()
            return [path.abspath(path.join(self.cmake.build_dir, arg[2:])) for arg in args if
                    arg.startswith("-I")] + def_inc_dirs
        else:
            return []

    def get_default_include_directories(self, target=None):
        compiler = self.get_compiler(target)

        if compiler.endswith("++"):
            lang = "c++"
        else:
            lang = "c"

        if lang in self.c_def_inc_dirs:
            return self.c_def_inc_dirs[lang]

        output = Popen([compiler, "-x" + lang, '-E', '-v', '-'], stdin=DEVNULL, stdout=DEVNULL, stderr=PIPE)
        stderr = output.stderr.read().decode()
        start = False
        paths = []
        for line in stderr.split('\n'):
            if not start:
                if line == '#include <...> search starts here:':
                    start = True
            elif start:
                if line == 'End of search list.':
                    break
                else:
                    paths.append(path.abspath(line[1:]))

        self.c_def_inc_dirs[lang] = paths
        return self.c_def_inc_dirs[lang]


class CMakeWrapper:
    def __init__(self):
        self.meson = Meson(self)
        self.version = [3, 10, 0]
        self.path = ""
        self.command = "generate"
        self.generator = "Unix Makefiles"
        self.options = {}
        self.target = "all"
        self.target_args = []
        self.build_dir = getcwd()
        self.source_dir = ""

    def run(self, args):
        self.path = args[0]
        i = 1
        while i < len(args):
            if args[i] == "-version" or args[i] == "--version":
                self.command = "version"
            if args[i] == "-help" or args[i] == "--help":
                self.command = "help"
            elif args[i] == "-G":
                self.command = "generate"
                i += 1
                self.generator = args[i]
            elif args[i].startswith("-G"):
                self.command = "generate"
                self.generator = args[i][2:]
            elif args[i] == "--build":
                self.command = "build"
                i += 1
                self.source_dir = args[i]
            elif args[i] == "--target":
                i += 1
                self.target = args[i]
            elif args[i] == "--":
                i += 1
                while i < len(args):
                    self.target_args.append(args[i])
                    i += 1
            elif args[i] == "-E":
                i += 1
                self.command = args[i]
                self.command_args = args[i:]
            elif args[i].startswith("-D"):
                if ":" in args[i]:
                    key, rest = args[i][2:].split(":", 1)
                    ty, val = rest.split("=", 1)
                else:
                    key, val = args[i][2:].split("=", 1)
                    ty = "STRING"
                self.options[key.lower()] = (val, ty)
            else:
                self.source_dir = args[i]
            i += 1

        if "meson" in self.options.keys():
            self.meson.path = self.options["meson"][0]

        if not hasattr(self, self.command + "_cmd"):
            print("Unsupported command: " + self.command)

        getattr(self, self.command + "_cmd")()

    def version_cmd(self):
        print("cmake version {0}".format(".".join(map(str, self.version))))

    def help_cmd(self):
        print("Usage")
        print("")
        print("meson-cmake-wrapper [options] <path-to-source>")
        print("cmake-cmake-wrapper [options] <path-to-existing-build>")
        print("")
        print("Specify a source directory to (re-)generate a build system for it in the")
        print("current working directory.  Specify an existing build directory to")
        print("re-generate its build system.")
        print("")
        print("Options")
        print("  -C <initial-cache>           = Pre-load a script to populate the cache.")
        print("  -D <var>[:<type>]=<value>    = Create a cmake cache entry.")
        print("  -G <generator-name>          = Specify a build system generator.")
        print("  -E                           = CMake command mode.")
        print("")
        print("  --build <dir>                = Build a CMake-generated project binary tree.")
        print("  --version,-version,/V [<f>]  = Print version number and exit.")
        print("")
        print("Generators")
        print("")
        print("The following generators are available on this platform:")
        print("  Unix Makefiles               = Generates standard UNIX makefiles.")
        print("  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.")

    def generate_cmd(self):
        print("Generate to build directory: " + self.build_dir)

        # Make sure meson is setup
        if not self.meson.setup():
            return

        # Make sure build directory exists
        if not path.exists(self.build_dir):
            mkdir(self.build_dir)

        # CLion requires a CMakeFiles directory at root of build directory
        root_cmakefiles_dir = path.join(self.build_dir, "CMakeFiles")
        if not path.exists(root_cmakefiles_dir):
            mkdir(root_cmakefiles_dir)

        # CLion requires that Makefile.cmake exists
        with open(path.join(root_cmakefiles_dir, "Makefile.cmake"), "w") as file:
            file.write("")

        # CLion fetches target directories from TargetDirectories.txt
        with open(path.join(root_cmakefiles_dir, "TargetDirectories.txt"), "w") as target_dir_file:
            targets = self.meson.get_targets()

            for target in targets:
                # All directories under the build directory should have a CMakeFiles directory
                cmakefiles_dir = path.join(self.build_dir, path.split(target["filename"])[0], "CMakeFiles")
                if not path.exists(cmakefiles_dir):
                    mkdir(cmakefiles_dir)

                # CLion fetches target name from TARGET_NAME.dir directories
                target_path = path.join(self.build_dir, path.split(target["filename"])[0], "CMakeFiles",
                                        target["name"] + ".dir")
                target_dir_file.write(target_path + "\n")
                if not path.exists(target_path):
                    mkdir(target_path)

                # CLion requires that TARGET_PATH/DependInfo.cmake exists
                with open(path.join(target_path, "DependInfo.cmake"), 'w') as depend_file:
                    depend_file.write("")

                # CLion fetches target name from TARGET_PATH/build.make
                with open(path.join(target_path, "build.make"), 'w') as build_file:
                    build_file.write(
                        path.join(target_path, "build") + ": " + path.join(self.build_dir, target["filename"]))

                with open(path.join(target_path, "flags.make"), 'w') as flags_file:
                    compiler = self.meson.get_compiler(target)
                    if compiler:
                        if compiler.endswith("++"):
                            prefix = "CXX"
                        else:
                            prefix = "CC"
                        flags_file.write(prefix + "_FLAGS = " + " ".join(self.meson.get_flags(target)) + "\n")
                        flags_file.write(prefix + "_DEFINES = " + " ".join(self.meson.get_defines(target)) + "\n")
                        flags_file.write(prefix + "_INCLUDES = " + " ".join(["-I" + inc_dir for inc_dir in self.meson.get_include_directories(target, False)]) + "\n")

        # CLion requires CMakeCache.txt
        self.gen_cmake_cache()

        # CLion requires PROJECT_NAME.cbp for IDE integration
        self.gen_codeblocks_project()

        call(["ninja", "reconfigure"])

    def build_cmd(self):
        print("Building target: " + self.target)
        self.meson.build()

    def capabilities_cmd(self):
        data = {"generators": [
            {"extraGenerators": ["CodeBlocks"],
             "name": "Unix Makefiles", "platformSupport": False, "toolsetSupport": False},
            {"extraGenerators": ["CodeBlocks"], "name": "Ninja",
             "platformSupport": False, "toolsetSupport": False}], "serverMode": False,
            "version": {"isDirty": False, "major": self.version[0], "minor": self.version[1], "patch": self.version[2],
                        "string": ".".join(map(str, self.version)), "suffix": ""}}
        print(json.dumps(data))

    def server_cmd(self):
        cmake_server = CMakeWrapperServer(self)

        cmake_server.run(self.command_args)

    def gen_cmake_cache(self):
        with open(path.join(self.build_dir, "CMakeCache.txt"), "w") as file:
            data = {
                "path": self.path,
                "build_dir": self.build_dir,
                "source_dir": self.source_dir,
                "project_name": self.meson.get_project_info()["name"],
                "version_major": self.version[0],
                "version_minor": self.version[1],
                "version_micro": self.version[2]

            }
            cmakecache_fmt = cmakecache.format(**data)
            file.write(cmakecache_fmt)

    def gen_codeblocks_project(self):
        root = ETree.Element("CodeBlocks_project_file")
        tree = ETree.ElementTree(root)
        ETree.SubElement(root, "FileVersion", {"major": "1", "minor": "6"})
        project = ETree.SubElement(root, "Project")
        ETree.SubElement(project, "Option", {"title": self.meson.get_project_info()["name"]})
        ETree.SubElement(project, "Option", {"makefile_is_custom": "1"})
        ETree.SubElement(project, "Option", {"compiler": "gcc"})
        ETree.SubElement(project, "Option", {"virtualFolders": "Meson Files"})

        build = ETree.SubElement(project, "Build")

        for target in self.meson.get_targets():
            build_target = ETree.SubElement(build, "Target", {"title": target["name"]})
            ETree.SubElement(build_target, "Option", {"output": path.join(self.build_dir, target["name"])})
            ETree.SubElement(build_target, "Option", {"working_dir": self.build_dir})
            ETree.SubElement(build_target, "Option", {"object_output": self.build_dir})
            ty = {
                "executable": "1",
                "shared library": "3",
                "custom": "4"
            }[target["type"]]
            ETree.SubElement(build_target, "Option", {"type": ty})

            compiler = self.meson.get_compiler(target)
            if compiler:
                ETree.SubElement(build_target, "Option", {"compiler": "gcc"})

            compiler = ETree.SubElement(build_target, "Compiler")
            for define in self.meson.get_defines(target):
                ETree.SubElement(compiler, "Add", {"option": define})
            for include_dir in self.meson.get_include_directories(target):
                ETree.SubElement(compiler, "Add", {"directory": include_dir})

            make_commands = ETree.SubElement(build_target, "MakeCommands")
            # TODO: lookup path to ninja
            ETree.SubElement(make_commands, "Build", {"command": "/usr/bin/ninja " + target["id"]})
            ETree.SubElement(make_commands, "CompileFile", {"command": "/usr/bin/ninja " + target["id"]})

        for target in self.meson.get_targets():
            target_files = self.meson.get_target_files(target)
            for target_file in target_files:
                unit = ETree.SubElement(project, "Unit", {"filename": path.join(self.source_dir, target_file)})
                ETree.SubElement(unit, "Option", {"target": target["name"]})

                base = path.splitext(path.basename(target_file))[0]
                header_exts = ("h", "hpp")
                for ext in header_exts:
                    header_file = path.abspath(path.join(self.source_dir, path.dirname(target_file), path.join(base + "." + ext)))
                    if path.exists(header_file):
                        unit = ETree.SubElement(project, "Unit", {"filename": header_file})
                        ETree.SubElement(unit, "Option", {"target": target["name"]})

        for file in self.meson.get_buildsystem_files():
            unit = ETree.SubElement(project, "Unit", {"filename": path.join(self.source_dir, file)})
            ETree.SubElement(unit, "Option", {"virtualFolder": "Meson Files"})

        project_file = path.join(self.build_dir, self.meson.get_project_info()["name"] + ".cbp")
        tree.write(project_file, "unicode", True)


class CMakeWrapperServer:
    def __init__(self, cmake):
        self.cmake = cmake
        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.socket_file = ""

    def run(self, args):
        for arg in args:
            if arg.startswith("--pipe="):
                self.socket_file = arg[7:]

        self.socket.bind(self.socket_file)
        self.socket.listen(1)
        conn, addr = self.socket.accept()
        while 1:
            data = conn.recv(1024)
            print(data)
            if not data: break
            conn.send(data)
        conn.close()

def main():
    cmake_wrapper = CMakeWrapper()

    cmake_wrapper.run(argv)


if __name__ == "__main__":
    main()
